#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include "DFRobot_INA219.h"

#define SDA_PIN 2  // Define the SDA pin
#define SCL_PIN 15  // Define the SCL pin


const char* ssid = "smallsaints";
const char* password = "smallsaintsx";
const char* scriptURL = "https://script.google.com/macros/s/AKfycbyJGwCpKqduYB6vNi7LnQ2D_1B28W6LJgF1LuYtuJd2lHr5s-Ibw19O2Qsn65WFmlVCAw/exec"; // Replace with your Google Apps Script URL

DFRobot_INA219_IIC ina219(&Wire, INA219_I2C_ADDRESS4);
float ina219Reading_mA = 1000;
float extMeterReading_mA = 1000;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  Wire.begin(SDA_PIN, SCL_PIN);
  ina219.begin();
  ina219.linearCalibrate(ina219Reading_mA, extMeterReading_mA);
  }
}

void loop() {
  float shuntVoltage_V = ina219.getShuntVoltage_mV() / 1000;
  float busVoltage_V = ina219.getBusVoltage_V();
  float current_A = ina219.getCurrent_mA() / 1000;
  float power_W = ina219.getPower_mW() / 1000;

  // Format your data as a JSON object
  StaticJsonDocument<200> doc;
  doc["timestamp"] = "time"; // You should replace "time" with actual timestamp retrieval code
  doc["bill_current"] = 0; // This should be calculated according to your billing logic
  doc["voltage"] = busVoltage_V;
  doc["power"] = power_W;
  doc["current"] = current_A;
  
  // Convert JSON to a string
  String data;
  serializeJson(doc, data);

  // Create an HTTP client
  HTTPClient http;
  http.begin(scriptURL);

  // Set headers
  http.addHeader("Content-Type", "application/json");

  // Send data as a POST request
  int httpResponseCode = http.POST(data);

  if (httpResponseCode > 0) {
    String response = http.getString();
    Serial.println("Data sent successfully");
    Serial.println("Server response: " + response);
  } else {
    Serial.print("Error on sending data. Error code: ");
    Serial.println(httpResponseCode);
  }

  http.end();

  // Delay between data transmissions
  delay(60000); // every 1 minute
}
